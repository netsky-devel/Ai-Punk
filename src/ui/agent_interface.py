"""
AI Punk Agent Interface
Beautiful terminal interface for interacting with the agent
"""

import sys
import os
from pathlib import Path
from typing import Optional, Dict, Any
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.table import Table
from rich.prompt import Prompt, Confirm
from rich.align import Align
from rich.columns import Columns
from rich.layout import Layout
from rich.live import Live
from rich.progress import Progress, SpinnerColumn, TextColumn

from ..agent import AIPunkAgent, create_agent
from ..config import AIProvider
from ..config.manager import ConfigManager
from ..config.models import AIProviderConfig
from ..config.memory import MemoryConfig, MemoryPresets, get_memory_config_info, calculate_estimated_memory_usage
from ..workspace.manager import WorkspaceManager
from ..localization.core import Localization


class AgentInterface:
    """Terminal interface for AI Punk Agent"""
    
    def __init__(self):
        self.console = Console()
        self.agent: Optional[AIPunkAgent] = None
        self.config_manager = ConfigManager()
        self.config = self.config_manager.load_config()
        self.workspace = WorkspaceManager()
        self.localization = Localization()
        
    def display_banner(self):
        """Display welcome banner"""
        banner_text = Text()
        banner_text.append(self.localization.get("welcome_banner"), style="bold bright_blue")
        banner_text.append("\n", style="white")
        banner_text.append(self.localization.get("welcome_subtitle"), style="dim")
        
        banner_panel = Panel(
            Align.center(banner_text),
            title=self.localization.get("welcome_title"),
            border_style="bright_blue",
            padding=(1, 2)
        )
        self.console.print(banner_panel)
        
    def display_status(self):
        """Display current status"""
        status_table = Table(show_header=False, box=None, padding=(0, 1))
        status_table.add_column("Setting", style="bold")
        status_table.add_column("Status", style="white")
        
        # Workspace status
        workspace_path = self.workspace.get_current_workspace()
        if workspace_path:
            status_table.add_row("üìÅ Working Directory:", str(workspace_path))
        else:
            status_table.add_row("üìÅ Working Directory:", "‚ùå Not selected")
        
        # AI Provider status
        if self.config.ai_provider:
            provider_name = self.config.ai_provider.provider.value.upper()
            model_name = self.config.ai_provider.model
            status_table.add_row("ü§ñ AI Provider:", f"‚úÖ {provider_name} ({model_name})")
        else:
            status_table.add_row("ü§ñ AI Provider:", "‚ùå Not configured")
            
        # Agent status
        if self.agent:
            status_table.add_row("‚ö° Agent:", self.localization.get("agent_ready"))
            
            # Session status
            try:
                session_stats = self.agent.get_session_stats()
                if session_stats.get("available"):
                    turns_count = session_stats.get("total_turns", 0)
                    success_rate = session_stats.get("success_rate", 0) * 100
                    status_table.add_row("üíæ Session:", f"‚úÖ {turns_count} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π ({success_rate:.1f}% —É—Å–ø–µ—Ö)")
                else:
                    status_table.add_row("üíæ Session:", "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            except Exception:
                status_table.add_row("üíæ Session:", "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        else:
            status_table.add_row("‚ö° Agent:", self.localization.get("agent_not_initialized"))
            
        status_panel = Panel(
            status_table,
            title="üìä Status",
            border_style="blue"
        )
        self.console.print(status_panel)
        
    def _load_env_file(self):
        """Load environment variables from .env file"""
        env_file = Path(".env")
        if env_file.exists():
            try:
                with open(env_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            key = key.strip()
                            value = value.strip().strip('"\'')
                            if key and value:
                                os.environ[key] = value
            except Exception:
                pass  # Ignore errors in .env file
    
    def setup_ai_provider(self):
        """Setup AI provider configuration"""
        self.console.print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", style="bold yellow")
        
        # Try to load .env file
        self._load_env_file()
        
        # Choose provider
        provider_choices = {
            "1": ("OpenAI", AIProvider.OPENAI),
            "2": ("Google Gemini", AIProvider.GOOGLE),
            "3": ("Anthropic Claude", AIProvider.ANTHROPIC)
        }
        
        self.console.print("\n–í—ã–±–µ—Ä–∏—Ç–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:")
        for key, (name, _) in provider_choices.items():
            self.console.print(f"  {key}. {name}")
            
        self.console.print("\nüí° [dim]–ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏:[/dim]")
        self.console.print("  [dim]‚Ä¢ Google Gemini: https://aistudio.google.com/app/apikey[/dim]")
        self.console.print("  [dim]‚Ä¢ OpenAI: https://platform.openai.com/api-keys[/dim]")
        self.console.print("  [dim]‚Ä¢ Anthropic: https://console.anthropic.com/account/keys[/dim]")
            
        choice = Prompt.ask("–í–∞—à –≤—ã–±–æ—Ä", choices=list(provider_choices.keys()))
        provider_name, provider = provider_choices[choice]
        
        # Check for existing API key in environment
        env_key_map = {
            AIProvider.GOOGLE: "GOOGLE_AI_API_KEY",
            AIProvider.OPENAI: "OPENAI_API_KEY", 
            AIProvider.ANTHROPIC: "ANTHROPIC_API_KEY"
        }
        
        env_key_name = env_key_map.get(provider)
        existing_key = os.getenv(env_key_name) if env_key_name else None
        
        if existing_key:
            self.console.print(f"‚úÖ –ù–∞–π–¥–µ–Ω API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è {env_key_name}", style="green")
            if Confirm.ask("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–π API –∫–ª—é—á?", default=True):
                api_key = existing_key
            else:
                self.console.print(f"\nüí° [dim]–°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å API –∫–ª—é—á –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (Ctrl+V)[/dim]")
                api_key = Prompt.ask(f"–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è {provider_name}")
        else:
            self.console.print(f"\nüí° [dim]–°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å API –∫–ª—é—á –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (Ctrl+V)[/dim]")
            self.console.print(f"üí° [dim]–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è {env_key_name}[/dim]")
            api_key = Prompt.ask(f"–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è {provider_name}")
        
        # Choose model
        model_suggestions = {
            AIProvider.OPENAI: ["gpt-4", "gpt-4-turbo", "gpt-3.5-turbo"],
            AIProvider.GOOGLE: [
                "gemini-1.5-flash",      # –ë—ã—Å—Ç—Ä–∞—è –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è)
                "gemini-1.5-pro",        # –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è)
                "gemini-1.5-flash-8b",   # –ó–∞–¥–∞—á–∏ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞
                "gemini-2.0-flash-exp",  # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.0
                "gemini-pro"             # –°—Ç–∞—Ä–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
            ],
            AIProvider.ANTHROPIC: ["claude-3-5-sonnet-20241022", "claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"]
        }
        
        suggested_models = model_suggestions.get(provider, [])
        if suggested_models:
            self.console.print(f"\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {provider_name}:")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è Google –º–æ–¥–µ–ª–µ–π
            if provider == AIProvider.GOOGLE:
                model_descriptions = {
                    "gemini-1.5-flash": "üî• –ë—ã—Å—Ç—Ä–∞—è –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                    "gemini-1.5-pro": "üíé –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ", 
                    "gemini-1.5-flash-8b": "‚ö° –ó–∞–¥–∞—á–∏ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞, —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è",
                    "gemini-2.0-flash-exp": "üß™ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è 2.0",
                    "gemini-pro": "üõ°Ô∏è –°—Ç–∞—Ä–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"
                }
                for i, model in enumerate(suggested_models, 1):
                    desc = model_descriptions.get(model, "")
                    self.console.print(f"  {i}. {model} {desc}")
            else:
                for i, model in enumerate(suggested_models, 1):
                    self.console.print(f"  {i}. {model}")
                
        # Allow selection by number or direct input
        if suggested_models:
            self.console.print(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:")
            choice = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ", default="1")
            
            # Check if it's a number
            try:
                model_index = int(choice) - 1
                if 0 <= model_index < len(suggested_models):
                    model = suggested_models[model_index]
                else:
                    model = choice  # Use as direct model name
            except ValueError:
                model = choice  # Use as direct model name
        else:
            model = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        
        # Save configuration
        self.config.ai_provider = AIProviderConfig(
            provider=provider,
            api_key=api_key,
            model=model
        )
        self.config_manager.save_config(self.config)
        # Reload configuration to update self.config
        self.config = self.config_manager.load_config()
        self.console.print(f"‚úÖ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!", style="green")
        
    def setup_workspace(self):
        """Setup workspace directory"""
        self.console.print("\nüìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", style="bold yellow")
        
        current_workspace = self.workspace.get_current_workspace()
        if current_workspace:
            self.console.print(f"–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_workspace}")
            if not Confirm.ask("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é?"):
                return
                
        path = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", default=".")
        
        if select_workspace(path):
            # Reload workspace and config to update self.workspace and self.config
            self.workspace = get_workspace()
            self.config = get_config()
            self.console.print("‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", style="green")
        else:
            self.console.print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", style="red")
            
    def initialize_agent(self):
        """Initialize the agent"""
        if not self.config.ai_provider:
            self.console.print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", style="red")
            return False
            
        if not self.workspace.get_current_workspace():
            self.console.print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é", style="red")
            return False
            
        try:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console,
                transient=True
            ) as progress:
                task = progress.add_task("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...", total=None)
                self.agent = create_agent(self.console)
                
            self.console.print("‚úÖ –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!", style="green")
            return True
            
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}", style="red")
            return False
            
    def run_agent_chat(self):
        """Run interactive chat with the agent"""
        if not self.agent:
            self.console.print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∞–≥–µ–Ω—Ç–∞", style="red")
            return
            
        self.console.print("\nüí¨ –†–µ–∂–∏–º —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–æ–º", style="bold green")
        self.console.print("–í–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
        
        while True:
            try:
                # Get user input
                user_input = Prompt.ask("[bold cyan]–í—ã[/bold cyan]")
                
                if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    self.console.print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="yellow")
                    break
                    
                if not user_input.strip():
                    continue
                    
                # Execute task
                result = self.agent.execute_task(user_input)
                
                if not result["success"]:
                    self.console.print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", style="red")
                    
            except KeyboardInterrupt:
                self.console.print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style="yellow")
                break
            except Exception as e:
                self.console.print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", style="red")
                
    def show_tools_info(self):
        """Show information about available tools"""
        if not self.agent:
            self.console.print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∞–≥–µ–Ω—Ç–∞", style="red")
            return
            
        tools_table = Table(title="üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        tools_table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="bold cyan")
        tools_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        
        for tool in self.agent.tools:
            tools_table.add_row(tool.name, tool.description)
            
        self.console.print(tools_table)
    
    def clear_session_memory(self):
        """Clear session memory and start fresh"""
        if not self.agent:
            self.console.print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∞–≥–µ–Ω—Ç–∞", style="red")
            return
        
        if Confirm.ask("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å —Å–µ—Å—Å–∏–∏? –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞."):
            try:
                self.agent.clear_session_memory()
                self.console.print("‚úÖ –ü–∞–º—è—Ç—å —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!", style="green")
            except Exception as e:
                self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏: {e}", style="red")
        else:
            self.console.print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", style="yellow")
    
    def setup_memory_settings(self):
        """Setup memory and session configuration"""
        self.console.print("\nüß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–º—è—Ç–∏ –∏ —Å–µ—Å—Å–∏–π", style="bold yellow")
        
        # Show current memory info if agent exists
        if self.agent:
            try:
                session_stats = self.agent.get_session_stats()
                if session_stats.get("available"):
                    current_history = session_stats.get("total_turns", 0)
                    self.console.print(f"–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è: {current_history} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
            except Exception:
                pass
        
        # Show preset options
        self.console.print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞–º—è—Ç–∏:")
        self.console.print("  1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (5 –¥–∏–∞–ª–æ–≥–æ–≤) - –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–∏—Å—Ç–µ–º")
        self.console.print("  2. –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è (20 –¥–∏–∞–ª–æ–≥–æ–≤) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")
        self.console.print("  3. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è (50 –¥–∏–∞–ª–æ–≥–æ–≤) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        self.console.print("  4. –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (100 –¥–∏–∞–ª–æ–≥–æ–≤) - –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
        self.console.print("  5. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        
        choice = Prompt.ask("–í–∞—à –≤—ã–±–æ—Ä", choices=["1", "2", "3", "4", "5"], default="2")
        
        if choice == "1":
            config = MemoryPresets.minimal()
            self._show_memory_config_summary(config, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è")
        elif choice == "2":
            config = MemoryPresets.balanced()
            self._show_memory_config_summary(config, "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è")
        elif choice == "3":
            config = MemoryPresets.extensive()
            self._show_memory_config_summary(config, "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è")
        elif choice == "4":
            config = MemoryPresets.developer_intensive()
            self._show_memory_config_summary(config, "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
        elif choice == "5":
            self._show_detailed_memory_info()
            return
        
        # Confirm and apply configuration
        if Confirm.ask("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é?", default=True):
            # Here we would save the config and restart agent if needed
            self.console.print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", style="green")
            self.console.print("üí° –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞", style="blue")
        else:
            self.console.print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã", style="yellow")
    
    def _show_memory_config_summary(self, config: MemoryConfig, preset_name: str):
        """Show summary of memory configuration"""
        usage_info = calculate_estimated_memory_usage(config)
        
        summary_table = Table(title=f"üß† –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {preset_name}")
        summary_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="bold cyan")
        summary_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")
        
        summary_table.add_row("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤", f"{config.max_conversation_history} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
        summary_table.add_row("–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏", f"{config.session_timeout_hours} —á–∞—Å–æ–≤")
        summary_table.add_row("–ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤", f"{config.max_context_files}")
        summary_table.add_row("–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫", f"{config.semantic_search_limit} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        summary_table.add_row("–ò–∑—É—á–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", "‚úÖ" if config.enable_pattern_learning else "‚ùå")
        summary_table.add_row("–°–∂–∞—Ç–∏–µ —Å–µ—Å—Å–∏–π", "‚úÖ" if config.compress_old_sessions else "‚ùå")
        summary_table.add_row("–†–∞–∑–º–µ—Ä —Å–µ—Å—Å–∏–∏", f"~{usage_info['estimated_session_size_mb']} –ú–ë")
        summary_table.add_row("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", usage_info['recommendation'])
        
        self.console.print(summary_table)
    
    def _show_detailed_memory_info(self):
        """Show detailed information about memory settings"""
        info_table = Table(title="üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–∞–º—è—Ç–∏")
        info_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="bold cyan")
        info_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        
        config_info = get_memory_config_info()
        for param, description in config_info.items():
            info_table.add_row(param, description)
        
        self.console.print(info_table)
        
        self.console.print("\nüí° [blue]–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É:[/blue]")
        self.console.print("‚Ä¢ [green]–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è[/green] - –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏")
        self.console.print("‚Ä¢ [yellow]–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è[/yellow] - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        self.console.print("‚Ä¢ [blue]–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è[/blue] - –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤") 
        self.console.print("‚Ä¢ [red]–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è[/red] - –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –º–æ—â–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö")
        
    def show_main_menu(self):
        """Display main menu"""
        menu_table = Table(show_header=False, box=None, padding=(0, 2))
        menu_table.add_column("Option", style="bold cyan")
        menu_table.add_column("Description", style="white")
        
        menu_table.add_row("1", self.localization.get("setup_ai_provider"))
        menu_table.add_row("2", self.localization.get("select_workspace"))
        menu_table.add_row("3", self.localization.get("initialize_agent"))
        menu_table.add_row("4", self.localization.get("start_chat"))
        menu_table.add_row("5", self.localization.get("show_tools"))
        menu_table.add_row("6", "Clear Session Memory")
        menu_table.add_row("7", "Memory Settings")
        menu_table.add_row("0", self.localization.get("exit"))
        
        menu_panel = Panel(
            menu_table,
            title=self.localization.get("main_menu"),
            border_style="cyan"
        )
        self.console.print(menu_panel)
        
    def run(self):
        """Run the main interface"""
        self.display_banner()
        
        while True:
            self.console.print()
            self.show_main_menu()
            
            choice = Prompt.ask("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", choices=["0", "1", "2", "3", "4", "5", "6", "7", "8"])
            
            if choice == "0":
                self.console.print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="yellow")
                break
            elif choice == "1":
                self.setup_ai_provider()
            elif choice == "2":
                self.setup_workspace()
            elif choice == "3":
                self.initialize_agent()
            elif choice == "4":
                self.run_agent_chat()
            elif choice == "5":
                self.show_tools_info()
            elif choice == "6":
                self.clear_session_memory()
            elif choice == "7":
                self.setup_memory_settings()
            elif choice == "8":
                self.display_status()


def run_agent_interface():
    """Entry point for the agent interface"""
    try:
        interface = AgentInterface()
        interface.run()
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 