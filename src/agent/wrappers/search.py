"""
Search LangChain Wrapper
Grep search functionality for LangChain agents
"""

from langchain.tools import BaseTool
from pydantic import BaseModel, Field
from typing import Type

from ...tools.filesystem import GrepTool


class SimpleGrepInput(BaseModel):
    """–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞"""
    pattern: str = Field(description="–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞")


class SimpleGrepLangChain(BaseTool):
    """–ü—Ä–æ—Å—Ç–∞—è LangChain –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞"""
    name: str = "grep_search"
    description: str = """–ò—â–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞.
    
    –ü–µ—Ä–µ–¥–∞–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞.
    –ü—Ä–∏–º–µ—Ä—ã: "import", "function", "class MyClass"
    """
    args_schema: Type[BaseModel] = SimpleGrepInput
    
    def __init__(self, workspace_path: str):
        super().__init__()
        self._tool = GrepTool(workspace_path)
    
    def _run(self, pattern: str) -> str:
        # –û—á–∏—â–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        clean_pattern = pattern.strip()
        result = self._tool.execute(clean_pattern)
        
        if not result["success"]:
            return f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
        
        if not result["matches"]:
            return f"üîç –ü–æ–∏—Å–∫ '{clean_pattern}': —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        output = [f"üîç –ü–æ–∏—Å–∫ '{clean_pattern}': –Ω–∞–π–¥–µ–Ω–æ {len(result['matches'])} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"]
        output.append("")
        
        for match in result["matches"]:
            output.append(f"üìÑ {match['file']}:{match['line']} - {match['content'].strip()}")
        
        return "\n".join(output) 