"""
Terminal LangChain Wrapper
Shell command execution for LangChain agents
"""

from langchain.tools import BaseTool
from pydantic import BaseModel, Field
from typing import Type

from ...tools.filesystem import TerminalTool


class SimpleTerminalInput(BaseModel):
    """–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    command: str = Field(description="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")


class SimpleTerminalLangChain(BaseTool):
    """–ü—Ä–æ—Å—Ç–∞—è LangChain –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    name: str = "run_terminal"
    description: str = """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.
    
    –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥: "python --version", "ls", "dir", "echo Hello"
    """
    args_schema: Type[BaseModel] = SimpleTerminalInput
    
    def __init__(self, workspace_path: str):
        super().__init__()
        self._tool = TerminalTool(workspace_path)
    
    def _run(self, command: str) -> str:
        # –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        clean_command = command.strip()
        result = self._tool.execute(clean_command)
        
        if not result["success"]:
            return f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
        
        output = [f"üíª –ö–æ–º–∞–Ω–¥–∞: {clean_command}"]
        output.append("")
        output.append(f"üìä –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result['return_code']}")
        output.append("")
        
        if result["stdout"]:
            output.append("üì§ –í—ã–≤–æ–¥:")
            output.append(result["stdout"])
        
        if result["stderr"]:
            output.append("‚ö†Ô∏è –û—à–∏–±–∫–∏:")
            output.append(result["stderr"])
        
        return "\n".join(output) 