"""
Filesystem LangChain Wrappers
Directory listing, file reading and editing wrappers for LangChain
"""

import json
from langchain.tools import BaseTool
from pydantic import BaseModel, Field
from typing import Type

from ...tools.filesystem import ListDirTool, ReadFileTool, EditFileTool


class SimpleListDirInput(BaseModel):
    """–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    path: str = Field(description="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π)")


class SimpleListDirLangChain(BaseTool):
    """–ü—Ä–æ—Å—Ç–∞—è LangChain –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    name: str = "list_directory"
    description: str = """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    
    –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ï –ü–£–¢–ò –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞.
    –ü—Ä–∏–º–µ—Ä—ã: ".", "src", "docs"
    """
    args_schema: Type[BaseModel] = SimpleListDirInput
    
    def __init__(self, workspace_path: str):
        super().__init__()
        self._tool = ListDirTool(workspace_path)
    
    def _run(self, path: str) -> str:
        # –û—á–∏—â–∞–µ–º –ø—É—Ç—å –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        clean_path = path.strip()
        result = self._tool.execute(clean_path)
        
        if not result["success"]:
            return f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
        
        output = [f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {result['path']}"]
        output.append(f"üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {result['total']}")
        output.append("")
        
        for entry in result["entries"]:
            icon = "üìÅ" if entry["is_directory"] else "üìÑ"
            size = f" ({entry['size']} –±–∞–π—Ç)" if not entry["is_directory"] else ""
            output.append(f"{icon} {entry['name']}{size}")
        
        return "\n".join(output)


class SimpleReadFileInput(BaseModel):
    """–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    file_path: str = Field(description="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —á—Ç–µ–Ω–∏—è (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π)")


class SimpleReadFileLangChain(BaseTool):
    """–ü—Ä–æ—Å—Ç–∞—è LangChain –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    name: str = "read_file"
    description: str = """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.
    
    –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ï –ü–£–¢–ò –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞.
    –ü—Ä–∏–º–µ—Ä—ã: "README.md", "src/main.py", "docs/guide.md"
    """
    args_schema: Type[BaseModel] = SimpleReadFileInput
    
    def __init__(self, workspace_path: str):
        super().__init__()
        self._tool = ReadFileTool(workspace_path)
    
    def _run(self, file_path: str) -> str:
        # –û—á–∏—â–∞–µ–º –ø—É—Ç—å –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        clean_path = file_path.strip()
        result = self._tool.execute(clean_path)
        
        if not result["success"]:
            return f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
        
        output = [f"üìÑ –§–∞–π–ª: {result['path']}"]
        output.append("")
        output.append(result["content"])
        
        return "\n".join(output)


class SimpleEditFileInput(BaseModel):
    """–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    input_data: str = Field(description="JSON —Å—Ç—Ä–æ–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {\"file_path\": \"path\", \"old_string\": \"old\", \"new_string\": \"new\"}")


class SimpleEditFileLangChain(BaseTool):
    """–ü—Ä–æ—Å—Ç–∞—è LangChain –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    name: str = "edit_file"
    description: str = """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –∑–∞–º–µ–Ω–æ–π —Å—Ç—Ä–æ–∫.
    
    –ü–µ—Ä–µ–¥–∞–π JSON —Å—Ç—Ä–æ–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
    {"file_path": "path/to/file", "old_string": "—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã", "new_string": "–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"}
    
    –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π old_string="" –∏ new_string="—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"
    """
    args_schema: Type[BaseModel] = SimpleEditFileInput
    
    def __init__(self, workspace_path: str):
        super().__init__()
        self._tool = EditFileTool(workspace_path)
    
    def _run(self, input_data: str) -> str:
        try:
            # –û—á–∏—â–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_input = input_data.strip()
            data = json.loads(clean_input)
            file_path = data["file_path"].strip()
            old_string = data.get("old_string", "")
            new_string = data["new_string"]
            
            result = self._tool.execute(file_path, old_string, new_string)
            
            if not result["success"]:
                return f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
            
            return f"‚úÖ –§–∞–π–ª {result['path']} –∏–∑–º–µ–Ω–µ–Ω. –ó–∞–º–µ–Ω–µ–Ω–æ {result['replacements_made']} –≤—Ö–æ–∂–¥–µ–Ω–∏–π."
            
        except json.JSONDecodeError:
            return "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç"
        except KeyError as e:
            return f"‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä {e}" 