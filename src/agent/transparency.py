"""
AI Punk Transparency System
Real-time display of agent thoughts, actions, and observations
"""

import time
from typing import Dict, Any, List, Optional
from langchain.callbacks.base import BaseCallbackHandler
from langchain.schema import AgentAction, AgentFinish, LLMResult
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn
from rich.live import Live
from rich.align import Align
from rich.columns import Columns

class TransparencyCallback(BaseCallbackHandler):
    """Callback handler for displaying agent process transparency"""
    
    def __init__(self, console: Optional[Console] = None):
        self.console = console or Console()
        self.step_count = 0
        self.start_time = None
        self.current_step = None
        self.live_display = None
        
    def on_agent_action(self, action: AgentAction, **kwargs: Any) -> Any:
        """Called when agent takes an action"""
        self.step_count += 1
        
        # Display thinking process
        thinking_panel = Panel(
            Text(action.log, style="cyan"),
            title=f"üß† –ú—ã—à–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ (–®–∞–≥ {self.step_count})",
            title_align="left",
            border_style="cyan"
        )
        self.console.print(thinking_panel)
        
        # Display action details
        action_table = Table(show_header=False, box=None, padding=(0, 1))
        action_table.add_column("Field", style="bold yellow")
        action_table.add_column("Value", style="white")
        
        action_table.add_row("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", action.tool)
        action_table.add_row("üìù –í–≤–æ–¥:", str(action.tool_input))
        
        action_panel = Panel(
            action_table,
            title="‚ö° –î–µ–π—Å—Ç–≤–∏–µ –∞–≥–µ–Ω—Ç–∞",
            title_align="left",
            border_style="yellow"
        )
        self.console.print(action_panel)
        
        # Show spinner while tool is executing
        self.console.print("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...", style="dim")
        
    def on_agent_finish(self, finish: AgentFinish, **kwargs: Any) -> Any:
        """Called when agent finishes"""
        elapsed_time = time.time() - self.start_time if self.start_time else 0
        
        # Display final result
        result_panel = Panel(
            Text(finish.return_values.get("output", ""), style="green"),
            title=f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∑–∞ {elapsed_time:.2f}—Å)",
            title_align="left",
            border_style="green"
        )
        self.console.print(result_panel)
        
        # Display summary
        summary_table = Table(show_header=False, box=None, padding=(0, 1))
        summary_table.add_column("Metric", style="bold blue")
        summary_table.add_column("Value", style="white")
        
        summary_table.add_row("üìä –í—Å–µ–≥–æ —à–∞–≥–æ–≤:", str(self.step_count))
        summary_table.add_row("‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", f"{elapsed_time:.2f}—Å")
        summary_table.add_row("üéØ –°—Ç–∞—Ç—É—Å:", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        summary_panel = Panel(
            summary_table,
            title="üìà –°–≤–æ–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            title_align="left",
            border_style="blue"
        )
        self.console.print(summary_panel)
        
    def on_tool_start(self, serialized: Dict[str, Any], input_str: str, **kwargs: Any) -> Any:
        """Called when tool starts executing"""
        tool_name = serialized.get("name", "unknown")
        
        tool_panel = Panel(
            f"üîß –ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}\nüì• –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {input_str}",
            title="üöÄ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
            title_align="left",
            border_style="magenta"
        )
        self.console.print(tool_panel)
        
    def on_tool_end(self, output: str, **kwargs: Any) -> Any:
        """Called when tool finishes executing"""
        # Truncate very long outputs
        display_output = output
        if len(output) > 500:
            display_output = output[:500] + "\n... (–≤—ã–≤–æ–¥ —Å–æ–∫—Ä–∞—â–µ–Ω)"
            
        result_panel = Panel(
            display_output,
            title="üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
            title_align="left",
            border_style="green"
        )
        self.console.print(result_panel)
        
    def on_tool_error(self, error: Exception, **kwargs: Any) -> Any:
        """Called when tool encounters an error"""
        error_panel = Panel(
            f"‚ùå –û—à–∏–±–∫–∞: {str(error)}",
            title="‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
            title_align="left",
            border_style="red"
        )
        self.console.print(error_panel)
        
    def on_llm_start(self, serialized: Dict[str, Any], prompts: List[str], **kwargs: Any) -> Any:
        """Called when LLM starts generating"""
        self.start_time = time.time()
        
        llm_panel = Panel(
            "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏...",
            title="üí≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ LLM",
            title_align="left",
            border_style="blue"
        )
        self.console.print(llm_panel)
        
    def on_llm_end(self, response: LLMResult, **kwargs: Any) -> Any:
        """Called when LLM finishes generating"""
        # Don't display raw LLM output as it's handled by agent callbacks
        pass
        
    def on_llm_error(self, error: Exception, **kwargs: Any) -> Any:
        """Called when LLM encounters an error"""
        error_panel = Panel(
            f"‚ùå –û—à–∏–±–∫–∞ LLM: {str(error)}",
            title="‚ö†Ô∏è –û—à–∏–±–∫–∞ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏",
            title_align="left",
            border_style="red"
        )
        self.console.print(error_panel)
        
    def on_chain_start(self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any) -> Any:
        """Called when chain starts"""
        self.console.print("\n" + "="*80)
        
        start_panel = Panel(
            f"üéØ –ó–∞–¥–∞—á–∞: {inputs.get('input', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {inputs.get('workspace', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
            title="üöÄ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏",
            title_align="left",
            border_style="bright_blue"
        )
        self.console.print(start_panel)
        
    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> Any:
        """Called when chain ends"""
        self.console.print("="*80 + "\n")
        
    def on_chain_error(self, error: Exception, **kwargs: Any) -> Any:
        """Called when chain encounters an error"""
        error_panel = Panel(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(error)}",
            title="üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏",
            title_align="left",
            border_style="red"
        )
        self.console.print(error_panel)
        
    def display_welcome(self):
        """Display welcome message"""
        welcome_text = Text()
        welcome_text.append("ü§ñ AI Punk Agent", style="bold bright_blue")
        welcome_text.append(" –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n", style="white")
        welcome_text.append("–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –º—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", style="dim")
        
        welcome_panel = Panel(
            Align.center(welcome_text),
            title="üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
            border_style="bright_blue"
        )
        self.console.print(welcome_panel)
        
    def display_task_header(self, task: str):
        """Display task header"""
        task_panel = Panel(
            Text(task, style="bold white"),
            title="üìã –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
            title_align="left",
            border_style="bright_green"
        )
        self.console.print(task_panel) 